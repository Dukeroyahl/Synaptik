name: synaptik

# Docker Compose configuration using published Docker Hub images
# Usage: 
#   1. Update DOCKERHUB_USERNAME below with your Docker Hub username
#   2. Run: docker-compose -f config/docker-compose.hub.yml up -d

# CHANGE THIS: Replace 'yourusername' with your actual Docker Hub username
x-dockerhub-username: &dockerhub-username "yourusername"

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: synaptik-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: synaptik
    volumes:
      - ./data/mongodb:/data/db
    networks:
      - synaptik-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Java/Quarkus Backend (from Docker Hub)
  server:
    image: *dockerhub-username/synaptik-server:latest
    container_name: synaptik-server
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      MONGODB_URI: mongodb://admin:password@mongodb:27017/synaptik?authSource=admin
      QUARKUS_HTTP_HOST: 0.0.0.0
      QUARKUS_HTTP_PORT: 8080
      QUARKUS_HTTP_CORS: true
      QUARKUS_HTTP_CORS_ORIGINS: http://localhost,http://localhost:3000,http://localhost:5173
      QUARKUS_LOG_LEVEL: INFO
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - synaptik-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # React Frontend (from Docker Hub)
  client:
    image: *dockerhub-username/synaptik-client:latest
    container_name: synaptik-client
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      server:
        condition: service_healthy
    networks:
      - synaptik-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Server for AI Integration (from Docker Hub)
  mcp-server:
    image: *dockerhub-username/synaptik-mcp-server:latest
    container_name: synaptik-mcp-server
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      SYNAPTIK_API_URL: http://server:8080/api
      NODE_ENV: production
    depends_on:
      server:
        condition: service_healthy
    networks:
      - synaptik-network
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Admin Interface (optional)
  mongo-express:
    image: mongo-express:1.0.0
    container_name: synaptik-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://admin:password@mongodb:27017/
      ME_CONFIG_BASICAUTH: false
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - synaptik-network

volumes:
  mongodb_data:
    driver: local

networks:
  synaptik-network:
    driver: bridge