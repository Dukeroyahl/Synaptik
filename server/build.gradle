plugins {
    id 'java'
    id 'io.quarkus'
    id 'com.adarshr.test-logger' version '4.0.0'
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-rest-jackson'
    implementation 'io.quarkus:quarkus-rest-client'
    implementation 'io.quarkus:quarkus-mongodb-panache'
    implementation 'io.quarkus:quarkus-hibernate-validator'
    implementation 'io.quarkus:quarkus-smallrye-openapi'
    implementation 'io.quarkiverse.mcp:quarkus-mcp-server-stdio:1.4.1'
    implementation 'io.quarkiverse.mcp:quarkus-mcp-server-sse:1.4.1'
    implementation 'io.quarkus:quarkus-smallrye-health'
    implementation 'io.quarkus:quarkus-arc'
    
    // Stanford NLP dependencies
    implementation 'edu.stanford.nlp:stanford-corenlp:4.5.4'
    implementation 'edu.stanford.nlp:stanford-corenlp:4.5.4:models'
    
    // Quarkus JaCoCo extension for code coverage
    testImplementation 'io.quarkus:quarkus-jacoco'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'org.mockito:mockito-core:5.8.0'
}

group 'org.dukeroyahl.synaptik'
version '0.0.1'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    testlogger {
        theme 'mocha'
        showExceptions true
        showStackTraces true
        showFullStackTraces false
        showCauses true
        slowThreshold 2000
        showSummary true
        showSimpleNames false
        showPassed true
        showSkipped true
        showFailed true
        showOnlySlow false
        showStandardStreams false
        showPassedStandardStreams true
        showSkippedStandardStreams true
        showFailedStandardStreams true
        logLevel 'lifecycle'
    }
    
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    useJUnitPlatform()
    
    // JaCoCo is configured via application.properties using Quarkus extension
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

// Native compilation configuration
tasks.register('buildMcpNative') {
    group = 'build'
    description = 'Build native MCP server binary'
    dependsOn 'build'
    doLast {
        exec {
            commandLine './gradlew', 'build', '-Dquarkus.package.type=native', '-Dquarkus.profile=mcp'
        }
    }
}