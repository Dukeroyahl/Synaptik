name: Docker Release

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      force_release:
        description: 'Force release even if CI checks fail'
        required: false
        default: false
        type: boolean
      test_mode:
        description: 'Test mode - build but do not push to registry'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  REGISTRY: docker.io
  IMAGE_NAME: roudranil/synaptik

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      major: ${{ steps.version.outputs.major }}
      minor: ${{ steps.version.outputs.minor }}
      should_release: ${{ steps.checks.outputs.should_release }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=$(echo ${GITHUB_REF#refs/tags/v})
          fi
          
          # Validate version format
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            exit 1
          fi
          
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f1-2)
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Release version: $VERSION"

      - name: Release validation checks
        id: checks
        run: |
          if [ "${{ github.event.inputs.force_release }}" = "true" ]; then
            echo "‚ö†Ô∏è Force release enabled - skipping CI checks"
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Version validation passed"
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    needs: validate-release
    if: needs.validate-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [frontend, backend]
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push component image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dist/docker/Dockerfile.${{ matrix.component }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event.inputs.test_mode != 'true' }}
          tags: |
            ${{ env.IMAGE_NAME }}-${{ matrix.component }}:${{ needs.validate-release.outputs.version }}
            ${{ env.IMAGE_NAME }}-${{ matrix.component }}:latest
          labels: |
            org.opencontainers.image.title=Synaptik ${{ matrix.component }}
            org.opencontainers.image.description=Synaptik ${{ matrix.component }} component
            org.opencontainers.image.version=${{ needs.validate-release.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: |
            type=gha,scope=${{ matrix.component }}-release
            type=registry,ref=${{ env.IMAGE_NAME }}-${{ matrix.component }}:cache
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.component }}-release
            type=registry,ref=${{ env.IMAGE_NAME }}-${{ matrix.component }}:cache,mode=max

  update-documentation:
    needs: [validate-release, build-and-push]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update Docker Hub descriptions
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.IMAGE_NAME }}-frontend
          readme-filepath: ./README.md

      - name: Update Backend Docker Hub description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.IMAGE_NAME }}-backend
          readme-filepath: ./README.md

  create-release:
    needs: [validate-release, build-and-push]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ needs.validate-release.outputs.version }}
          release_name: üöÄ Synaptik v${{ needs.validate-release.outputs.version }}
          body: |
            ## üöÄ Synaptik v${{ needs.validate-release.outputs.version }}
            
            ### üê≥ Docker Images
            
            **Frontend:**
            ```bash
            docker pull ${{ env.IMAGE_NAME }}-frontend:${{ needs.validate-release.outputs.version }}
            ```
            
            **Backend:**
            ```bash
            docker pull ${{ env.IMAGE_NAME }}-backend:${{ needs.validate-release.outputs.version }}
            ```
            
            ### üöÄ Quick Start
            
            ```bash
            curl -sSL https://raw.githubusercontent.com/Dukeroyahl/synaptik/main/install.sh | bash
            ```
            
            ## üìñ Documentation
            
            - [User Guide](https://github.com/Dukeroyahl/synaptik/blob/main/docs/WIKI.md#user-guide)
            - [Docker Usage](https://github.com/Dukeroyahl/synaptik/blob/main/docs/WIKI.md#docker-usage)
            - [API Documentation](http://localhost:8080/q/swagger-ui) (after starting)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-summary:
    needs: [validate-release, build-and-push, update-documentation, create-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate release summary
        run: |
          echo "## üê≥ Docker Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "**Test Mode:** ${{ github.event.inputs.test_mode == 'true' && 'üß™ Yes (no push)' || 'üì¶ No (published)' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Job Status" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Component Builds | ${{ needs.build-and-push.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation | ${{ needs.update-documentation.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ${{ needs.create-release.result == 'success' && '‚úÖ Success' || (needs.create-release.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-push.result }}" = "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
              echo "### üß™ Test Build Completed" >> $GITHUB_STEP_SUMMARY
              echo "Images were built but not pushed to registry." >> $GITHUB_STEP_SUMMARY
            else
              echo "### üì¶ Published Images" >> $GITHUB_STEP_SUMMARY
              echo "- \`${{ env.IMAGE_NAME }}-frontend:${{ needs.validate-release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
              echo "- \`${{ env.IMAGE_NAME }}-backend:${{ needs.validate-release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
              echo "- \`${{ env.IMAGE_NAME }}-frontend:latest\`" >> $GITHUB_STEP_SUMMARY
              echo "- \`${{ env.IMAGE_NAME }}-backend:latest\`" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Check critical failures
        run: |
          if [ "${{ needs.build-and-push.result }}" != "success" ]; then
            echo "‚ùå Critical build failures detected"
            exit 1
          fi
          echo "‚úÖ All builds completed successfully"
