name: Docker Release

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      force_release:
        description: 'Force release even if CI checks fail'
        required: false
        default: false
        type: boolean
      test_mode:
        description: 'Test mode - build but do not push to registry'
        required: false
        default: false
        type: boolean

# Cancel previous release runs for the same tag/version
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel releases, let them complete

env:
  REGISTRY: docker.io
  IMAGE_NAME: roudranil/synaptik

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      major: ${{ steps.version.outputs.major }}
      minor: ${{ steps.version.outputs.minor }}
      should_release: ${{ steps.checks.outputs.should_release }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            exit 1
          fi
          
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f1-2)
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          
          echo "üè∑Ô∏è Release version: $VERSION"

      - name: Check CI status
        id: checks
        run: |
          if [ "${{ github.event.inputs.force_release }}" = "true" ]; then
            echo "‚ö†Ô∏è Forcing release, skipping CI checks"
            echo "should_release=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if latest CI passed using GitHub API
          LATEST_CI_STATUS=$(gh api repos/${{ github.repository }}/commits/${{ github.sha }}/status --jq '.state')
          if [ "$LATEST_CI_STATUS" = "success" ]; then
            echo "‚úÖ CI checks passed"
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå CI checks failed or pending: $LATEST_CI_STATUS"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  prepare-build-context:
    needs: validate-release
    if: needs.validate-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    outputs:
      frontend-hash: ${{ steps.context.outputs.frontend-hash }}
      backend-hash: ${{ steps.context.outputs.backend-hash }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate build context hashes
        id: context
        run: |
          # Generate hash for frontend dependencies
          FRONTEND_HASH=$(find client -name "package*.json" -type f -exec cat {} \; | sha256sum | cut -d' ' -f1)
          echo "frontend-hash=$FRONTEND_HASH" >> $GITHUB_OUTPUT
          
          # Generate hash for backend dependencies  
          BACKEND_HASH=$(find server -name "*.gradle*" -type f -exec cat {} \; | sha256sum | cut -d' ' -f1)
          echo "backend-hash=$BACKEND_HASH" >> $GITHUB_OUTPUT
          
          echo "Frontend dependencies hash: $FRONTEND_HASH"
          echo "Backend dependencies hash: $BACKEND_HASH"

      - name: Cache Docker buildx state
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

  build-and-push:
    needs: [validate-release, prepare-build-context]
    if: needs.validate-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [frontend, backend]
      fail-fast: false  # Continue building other components if one fails
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
          buildkitd-flags: --allow-insecure-entitlement security.insecure

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Restore Docker buildx cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push component image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dist/docker/Dockerfile.${{ matrix.component }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event.inputs.test_mode != 'true' }}
          tags: |
            ${{ env.IMAGE_NAME }}-${{ matrix.component }}:${{ needs.validate-release.outputs.version }}
            ${{ env.IMAGE_NAME }}-${{ matrix.component }}:latest
          labels: |
            org.opencontainers.image.title=Synaptik ${{ matrix.component }}
            org.opencontainers.image.description=Synaptik ${{ matrix.component }} - TaskWarrior DNA task management
            org.opencontainers.image.version=${{ needs.validate-release.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          cache-from: |
            type=gha,scope=${{ matrix.component }}-release
            type=registry,ref=${{ env.IMAGE_NAME }}-${{ matrix.component }}:cache
            type=local,src=/tmp/.buildx-cache
          cache-to: |
            type=gha,mode=max,scope=${{ matrix.component }}-release
            type=registry,ref=${{ env.IMAGE_NAME }}-${{ matrix.component }}:cache,mode=max
            type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

  build-unified-image:
    needs: [validate-release, build-and-push]
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push unified image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event.inputs.test_mode != 'true' }}
          tags: |
            ${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
            ${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.minor }}
            ${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.major }}
            ${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.title=Synaptik
            org.opencontainers.image.description=A next-generation task management application with TaskWarrior DNA
            org.opencontainers.image.version=${{ needs.validate-release.outputs.version }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          cache-from: |
            type=gha,scope=unified-release
            type=registry,ref=${{ env.IMAGE_NAME }}:cache
          cache-to: |
            type=gha,mode=max,scope=unified-release
            type=registry,ref=${{ env.IMAGE_NAME }}:cache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
          outputs: type=image,name=${{ env.IMAGE_NAME }},push=true

  update-documentation:
    needs: [validate-release, build-and-push]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update Docker Hub descriptions
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.IMAGE_NAME }}
          readme-filepath: ./README.md

  create-release:
    needs: [validate-release, build-unified-image]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          body: |
            ## üê≥ Docker Images
            
            This release is available on Docker Hub with the following tags:
            
            **Unified Application:**
            - `roudranil/synaptik:${{ needs.validate-release.outputs.version }}` - Exact version
            - `roudranil/synaptik:${{ needs.validate-release.outputs.minor }}` - Latest patch of minor version
            - `roudranil/synaptik:${{ needs.validate-release.outputs.major }}` - Latest minor of major version
            - `roudranil/synaptik:latest` - Latest stable release
            
            **Individual Components:**
            - `roudranil/synaptik-frontend:${{ needs.validate-release.outputs.version }}`
            - `roudranil/synaptik-backend:${{ needs.validate-release.outputs.version }}`
            
            ## üöÄ Quick Start
            
            ```bash
            # Using exact version (recommended for production)
            docker run -p 8080:8080 roudranil/synaptik:${{ needs.validate-release.outputs.version }}
            
            # Using docker-compose
            curl -sSL https://raw.githubusercontent.com/Dukeroyahl/synaptik/main/dist/docker-compose.yml -o docker-compose.yml
            docker-compose up -d
            ```
            
            ## üìñ Documentation
            
            - [User Guide](https://github.com/Dukeroyahl/synaptik/blob/main/docs/WIKI.md#user-guide)
            - [Docker Usage](https://github.com/Dukeroyahl/synaptik/blob/main/docs/WIKI.md#docker-usage)
            - [Version Selection Guide](https://github.com/Dukeroyahl/synaptik/blob/main/docs/CHANGELOG.md#docker-tag-selection-guide)
            - [API Documentation](http://localhost:8080/q/swagger-ui) (after starting)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-summary:
    needs: [validate-release, build-and-push, build-unified-image, update-documentation, create-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Release Summary
        run: |
          echo "## üöÄ Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Test Mode:** ${{ github.event.inputs.test_mode == 'true' && 'üß™ Yes (no push)' || 'üì¶ No (published)' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Job Status" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Component Builds | ${{ needs.build-and-push.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unified Image | ${{ needs.build-unified-image.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation | ${{ needs.update-documentation.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ${{ needs.create-release.result == 'success' && '‚úÖ Success' || (needs.create-release.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-unified-image.result }}" = "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
              echo "### üß™ Test Build Completed" >> $GITHUB_STEP_SUMMARY
              echo "Images were built but not pushed to registry." >> $GITHUB_STEP_SUMMARY
            else
              echo "### üê≥ Published Images" >> $GITHUB_STEP_SUMMARY
              echo "- \`roudranil/synaptik:${{ needs.validate-release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
              echo "- \`roudranil/synaptik:latest\`" >> $GITHUB_STEP_SUMMARY
              echo "- \`roudranil/synaptik-frontend:${{ needs.validate-release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
              echo "- \`roudranil/synaptik-backend:${{ needs.validate-release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Check critical failures
        run: |
          if [ "${{ needs.build-and-push.result }}" != "success" ] || [ "${{ needs.build-unified-image.result }}" != "success" ]; then
            echo "‚ùå Critical build failures detected"
            exit 1
          fi
          echo "‚úÖ All critical jobs completed successfully"
