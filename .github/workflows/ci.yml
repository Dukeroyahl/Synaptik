name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '21'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'client/**'
              - 'dist/docker/Dockerfile.frontend'
              - 'dist/docker/nginx.conf'
            backend:
              - 'server/**'
              - 'dist/docker/Dockerfile.backend'
            docker:
              - 'dist/docker/**'
              - 'docker-compose*.yml'

  frontend-test:
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        run: |
          cd client
          npm ci

      - name: Lint code
        run: |
          cd client
          npm run lint

      - name: Type check
        run: |
          cd client
          npm run type-check || true

      - name: Run tests
        run: |
          cd client
          npm test -- --coverage --passWithNoTests

      - name: Build application
        run: |
          cd client
          npm run build

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          directory: ./client/coverage
          flags: frontend

  backend-test:
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      - name: Grant execute permission
        run: chmod +x server/gradlew

      - name: Run tests
        run: |
          cd server
          ./gradlew clean test jacocoTestReport

      - name: Run integration tests
        run: |
          cd server
          ./gradlew integrationTest || true

      - name: Code quality check
        run: |
          cd server
          ./gradlew check

      - name: Build application
        run: |
          cd server
          ./gradlew build -Dquarkus.package.type=uber-jar

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          directory: ./server/build/reports/jacoco
          flags: backend

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  docker-build-test:
    needs: [changes, frontend-test, backend-test]
    if: |
      always() && 
      (needs.changes.outputs.docker == 'true' || 
       needs.frontend-test.result == 'success' || 
       needs.backend-test.result == 'success') &&
      github.event_name == 'push'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [frontend, backend]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (test only)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dist/docker/Dockerfile.${{ matrix.component }}
          push: false
          tags: synaptik-${{ matrix.component }}:test
          cache-from: type=gha,scope=${{ matrix.component }}
          cache-to: type=gha,mode=max,scope=${{ matrix.component }}

  status-check:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security-scan, docker-build-test]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          echo "Frontend: ${{ needs.frontend-test.result }}"
          echo "Backend: ${{ needs.backend-test.result }}"
          echo "Security: ${{ needs.security-scan.result }}"
          echo "Docker: ${{ needs.docker-build-test.result }}"
          
          if [[ "${{ needs.frontend-test.result }}" == "failure" || 
                "${{ needs.backend-test.result }}" == "failure" ]]; then
            echo "❌ Critical tests failed"
            exit 1
          fi
          
          echo "✅ All critical tests passed"
