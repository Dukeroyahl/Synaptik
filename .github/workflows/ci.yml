name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '18'

jobs:
  # Backend Java Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
          MONGO_INITDB_DATABASE: synaptik
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x server/gradlew

    - name: Run backend tests
      working-directory: ./server
      run: ./gradlew test
      env:
        MONGODB_URI: mongodb://admin:password@localhost:27017/synaptik?authSource=admin

    - name: Generate test report
      working-directory: ./server
      run: ./gradlew jacocoTestReport

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: server/build/reports/

  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install dependencies
      working-directory: ./client
      run: npm ci

    - name: Run linting
      working-directory: ./client
      run: npm run lint

    - name: Run type checking
      working-directory: ./client
      run: npm run type-check

    - name: Run tests
      working-directory: ./client
      run: npm test -- --coverage --watchAll=false

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./client/coverage/lcov.info
        flags: frontend

  # MCP Server Tests
  mcp-test:
    name: MCP Server Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mcp-server/package-lock.json

    - name: Install dependencies
      working-directory: ./mcp-server
      run: npm ci

    - name: Build TypeScript
      working-directory: ./mcp-server
      run: npm run build

    - name: Run tests
      working-directory: ./mcp-server
      run: npm test

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, mcp-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        file: ./server/Dockerfile
        push: false
        tags: synaptik-server:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./client
        file: ./client/Dockerfile
        push: false
        tags: synaptik-client:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build MCP server Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./mcp-server
        file: ./mcp-server/Dockerfile
        push: false
        tags: synaptik-mcp:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Compose
      run: |
        docker-compose -f config/docker-compose.full.yml up -d
        sleep 30

    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/q/health; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

    - name: Run API tests
      run: |
        curl -f http://localhost:8080/q/health
        curl -f http://localhost:8080/api/tasks
        curl -f http://localhost:3000

    - name: Show logs on failure
      if: failure()
      run: |
        docker-compose -f config/docker-compose.full.yml logs

    - name: Cleanup
      if: always()
      run: |
        docker-compose -f config/docker-compose.full.yml down -v

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'