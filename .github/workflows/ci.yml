name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, "feature/*", "hotfix/*"]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: false
        default: 'test'
        type: choice
        options:
        - test
        - staging
        - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

# Smart concurrency - cancel for PRs, don't cancel for main
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

permissions:
  contents: write  # Required for version bumping and pushing tags
  security-events: write
  actions: read

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '21'

jobs:
  # Determine what type of checks to run
  workflow-context:
    runs-on: ubuntu-latest
    outputs:
      check_type: ${{ steps.context.outputs.check_type }}
      environment: ${{ steps.context.outputs.environment }}
      frontend_changed: ${{ steps.changes.outputs.frontend }}
      backend_changed: ${{ steps.changes.outputs.backend }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'client/**'
              - 'mcp-server/**'
              - '*.json'
              - 'package*.json'
            backend:
              - 'server/**'
              - '*.gradle*'
              - 'gradle/**'

      - name: Determine workflow context
        id: context
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "check_type=fast" >> $GITHUB_OUTPUT
            echo "environment=test" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "check_type=comprehensive" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "check_type=comprehensive" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "check_type=standard" >> $GITHUB_OUTPUT
            echo "environment=test" >> $GITHUB_OUTPUT
          fi

  # Fast checks for PRs
  fast-validation:
    needs: workflow-context
    if: needs.workflow-context.outputs.check_type == 'fast'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        check: [frontend-lint, backend-compile, security-basic]
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environments
        run: |
          if [[ "${{ matrix.check }}" == "frontend-lint" && "${{ needs.workflow-context.outputs.frontend_changed }}" == "true" ]]; then
            echo "RUN_CHECK=true" >> $GITHUB_ENV
          elif [[ "${{ matrix.check }}" == "backend-compile" && "${{ needs.workflow-context.outputs.backend_changed }}" == "true" ]]; then
            echo "RUN_CHECK=true" >> $GITHUB_ENV
          elif [[ "${{ matrix.check }}" == "security-basic" ]]; then
            echo "RUN_CHECK=true" >> $GITHUB_ENV
          else
            echo "RUN_CHECK=false" >> $GITHUB_ENV
          fi

      - name: Frontend fast lint
        if: env.RUN_CHECK == 'true' && matrix.check == 'frontend-lint'
        run: |
          cd client
          npm ci --prefer-offline --no-audit
          npm run lint -- --max-warnings 0
          npm run type-check

      - name: Backend fast compile
        if: env.RUN_CHECK == 'true' && matrix.check == 'backend-compile'
        run: |
          cd server
          chmod +x gradlew
          ./gradlew compileJava compileTestJava --no-daemon

      - name: Basic security scan
        if: env.RUN_CHECK == 'true' && matrix.check == 'security-basic'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: 1
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

  # Comprehensive CI for main branch and manual triggers
  comprehensive-ci:
    needs: workflow-context
    if: needs.workflow-context.outputs.check_type != 'fast'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [frontend, backend]
        task: [test, build]
      fail-fast: false
    
    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json
            mcp-server/package-lock.json

      - name: Setup JDK and Gradle cache
        if: matrix.component == 'backend'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        if: matrix.component == 'backend'
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            server/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('server/**/*.gradle*', 'server/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Frontend tasks
        if: matrix.component == 'frontend' && needs.workflow-context.outputs.frontend_changed == 'true'
        run: |
          cd client
          npm ci
          
          if [ "${{ matrix.task }}" = "test" ]; then
            npm run lint
            npm run type-check
            npm test -- --coverage --passWithNoTests --watchAll=false
          elif [ "${{ matrix.task }}" = "build" ]; then
            npm run build
          fi

      - name: Backend tasks
        if: matrix.component == 'backend' && needs.workflow-context.outputs.backend_changed == 'true'
        run: |
          cd server
          chmod +x gradlew
          
          if [ "${{ matrix.task }}" = "test" ]; then
            if ! ./gradlew clean test jacocoTestReport 2>/dev/null; then
              echo "‚ö†Ô∏è JaCoCo coverage failed, running tests without coverage..."
              ./gradlew clean test
            fi
          elif [ "${{ matrix.task }}" = "build" ]; then
            ./gradlew build -Dquarkus.package.type=uber-jar
          fi

      - name: Upload test artifacts
        if: matrix.task == 'test' && always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.component }}
          path: |
            client/coverage/
            server/build/reports/
          retention-days: 3

  # Security and quality checks
  security-comprehensive:
    needs: workflow-context
    if: needs.workflow-context.outputs.check_type == 'comprehensive'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Full security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'


  # Auto-versioning and Docker publish on merge to main
  auto-version-and-publish:
    needs: [workflow-context, comprehensive-ci]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.comprehensive-ci.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      version_tag: ${{ steps.version.outputs.version_tag }}
      version_type: ${{ steps.version.outputs.version_type }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Generate new version
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Parse version components
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Always increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          VERSION_TAG="v$NEW_VERSION"
          VERSION_TYPE="PATCH"
          
          echo "ü©π Auto-incrementing PATCH version"
          echo "New version: $NEW_VERSION"
          echo "Version tag: $VERSION_TAG"
          
          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version
          
          # Update client config.ts version
          sed -i "s/APP_VERSION = '[^']*'/APP_VERSION = '$NEW_VERSION'/" client/src/config.ts
          
          # Commit version changes
          git add package.json client/src/config.ts
          git commit -m "chore: bump patch version to $NEW_VERSION [skip ci]"
          
          # Create and push tag
          git tag $VERSION_TAG
          git push origin main
          git push origin $VERSION_TAG
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT

  docker-publish:
    needs: [workflow-context, comprehensive-ci, auto-version-and-publish]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.comprehensive-ci.result == 'success'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [frontend, backend, mcp-server]
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.auto-version-and-publish.outputs.version_tag }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: roudranil/synaptik
          tags: |
            type=raw,value=${{ matrix.component }}-latest
            type=raw,value=${{ matrix.component }}-${{ needs.auto-version-and-publish.outputs.new_version }}
            type=raw,value=${{ matrix.component }}-{{date 'YYYY.MM.DD'}}-{{sha}}

      - name: Build and push component image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dist/docker/Dockerfile.${{ matrix.component }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.version=${{ needs.auto-version-and-publish.outputs.new_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-github-release:
    needs: [auto-version-and-publish, docker-publish]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.auto-version-and-publish.outputs.version_tag }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.auto-version-and-publish.outputs.version_tag }}
          name: Release ${{ needs.auto-version-and-publish.outputs.new_version }}
          generate_release_notes: true
          body: |
            ## üöÄ Synaptik ${{ needs.auto-version-and-publish.outputs.new_version }}
            
            **${{ needs.auto-version-and-publish.outputs.version_type }} release** - Automated patch release from main branch
            
            ### üìã Release Details
            
            - **Version Type**: ${{ needs.auto-version-and-publish.outputs.version_type }} (automated increment)
            - **Release Notes**: Check commit history for detailed changes
            - **Commit SHA**: ${{ github.sha }}
            
            ### üê≥ Docker Images
            
            This release includes the following Docker images:
            
            - `roudranil/synaptik:frontend-${{ needs.auto-version-and-publish.outputs.new_version }}`
            - `roudranil/synaptik:backend-${{ needs.auto-version-and-publish.outputs.new_version }}`  
            - `roudranil/synaptik:mcp-server-${{ needs.auto-version-and-publish.outputs.new_version }}`
            
            ### üì¶ Installation
            
            ```bash
            curl -sSL https://raw.githubusercontent.com/Dukeroyahl/synaptik/main/install.sh | bash
            ```
            
            ### üîó Links
            
            - [üê≥ Docker Hub](https://hub.docker.com/r/roudranil/synaptik)
            - [üìö Documentation](https://github.com/Dukeroyahl/Synaptik/wiki)
            - [üöÄ Quick Start](https://github.com/Dukeroyahl/Synaptik#-quick-start)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Status reporting
  ci-summary:
    needs: [workflow-context, fast-validation, comprehensive-ci, security-comprehensive, auto-version-and-publish, docker-publish, create-github-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## üöÄ CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Check Type:** ${{ needs.workflow-context.outputs.check_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.workflow-context.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend Changed:** ${{ needs.workflow-context.outputs.frontend_changed }}" >> $GITHUB_STEP_SUMMARY
          echo "**Backend Changed:** ${{ needs.workflow-context.outputs.backend_changed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.workflow-context.outputs.check_type }}" = "fast" ]; then
            echo "| Fast Validation | ${{ needs.fast-validation.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Comprehensive CI | ${{ needs.comprehensive-ci.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Security Scan | ${{ needs.security-comprehensive.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
            if [ "${{ github.ref }}" = "refs/heads/main" ] && [ "${{ github.event_name }}" = "push" ]; then
              echo "| Auto Versioning | ${{ needs.auto-version-and-publish.result == 'success' && '‚úÖ Success' || (needs.auto-version-and-publish.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }} |" >> $GITHUB_STEP_SUMMARY
              echo "| Docker Publish | ${{ needs.docker-publish.result == 'success' && '‚úÖ Success' || (needs.docker-publish.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }} |" >> $GITHUB_STEP_SUMMARY
              echo "| GitHub Release | ${{ needs.create-github-release.result == 'success' && '‚úÖ Success' || (needs.create-github-release.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed') }} |" >> $GITHUB_STEP_SUMMARY
              if [ "${{ needs.auto-version-and-publish.outputs.new_version }}" != "" ]; then
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "### üéâ New Version Released" >> $GITHUB_STEP_SUMMARY
                echo "**Version:** ${{ needs.auto-version-and-publish.outputs.new_version }} (${{ needs.auto-version-and-publish.outputs.version_type }})" >> $GITHUB_STEP_SUMMARY
                echo "**Tag:** ${{ needs.auto-version-and-publish.outputs.version_tag }}" >> $GITHUB_STEP_SUMMARY
                echo "**Type:** Automated patch increment" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "**Docker Images:**" >> $GITHUB_STEP_SUMMARY
                echo "- \`roudranil/synaptik:frontend-${{ needs.auto-version-and-publish.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
                echo "- \`roudranil/synaptik:backend-${{ needs.auto-version-and-publish.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
                echo "- \`roudranil/synaptik:mcp-server-${{ needs.auto-version-and-publish.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          fi

      - name: Check critical failures
        run: |
          if [ "${{ needs.workflow-context.outputs.check_type }}" = "fast" ]; then
            if [ "${{ needs.fast-validation.result }}" != "success" ]; then
              echo "‚ùå Fast validation failed"
              exit 1
            fi
          else
            if [ "${{ needs.comprehensive-ci.result }}" != "success" ]; then
              echo "‚ùå Comprehensive CI failed"
              exit 1
            fi
            # Only fail on versioning/publishing jobs if they were supposed to run (main branch push)
            if [ "${{ github.ref }}" = "refs/heads/main" ] && [ "${{ github.event_name }}" = "push" ]; then
              if [ "${{ needs.auto-version-and-publish.result }}" != "success" ]; then
                echo "‚ùå Auto versioning failed"
                exit 1
              fi
              if [ "${{ needs.docker-publish.result }}" != "success" ]; then
                echo "‚ùå Docker publish failed"
                exit 1
              fi
              if [ "${{ needs.create-github-release.result }}" != "success" ]; then
                echo "‚ùå GitHub release creation failed"
                exit 1
              fi
            fi
          fi
          echo "‚úÖ All checks passed"
