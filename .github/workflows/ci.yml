name: CI

on:
  push:
    branches: [main, develop, "feature/*", "hotfix/*"]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: false
        default: 'test'
        type: choice
        options:
        - test
        - staging
        - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

# Smart concurrency - cancel for PRs, don't cancel for main
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '21'

jobs:
  # Determine what type of checks to run
  workflow-context:
    runs-on: ubuntu-latest
    outputs:
      check_type: ${{ steps.context.outputs.check_type }}
      environment: ${{ steps.context.outputs.environment }}
      frontend_changed: ${{ steps.changes.outputs.frontend }}
      backend_changed: ${{ steps.changes.outputs.backend }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect file changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            frontend:
              - 'client/**'
              - '*.json'
              - 'package*.json'
            backend:
              - 'server/**'
              - 'mcp/**'
              - '*.gradle*'
              - 'gradle/**'

      - name: Determine workflow context
        id: context
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "check_type=fast" >> $GITHUB_OUTPUT
            echo "environment=test" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "check_type=comprehensive" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "check_type=comprehensive" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "check_type=standard" >> $GITHUB_OUTPUT
            echo "environment=test" >> $GITHUB_OUTPUT
          fi

  # Fast checks for PRs
  fast-validation:
    needs: workflow-context
    if: needs.workflow-context.outputs.check_type == 'fast'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        check: [frontend-lint, backend-compile, security-basic]
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environments
        run: |
          if [[ "${{ matrix.check }}" == "frontend-lint" && "${{ needs.workflow-context.outputs.frontend_changed }}" == "true" ]]; then
            echo "RUN_CHECK=true" >> $GITHUB_ENV
          elif [[ "${{ matrix.check }}" == "backend-compile" && "${{ needs.workflow-context.outputs.backend_changed }}" == "true" ]]; then
            echo "RUN_CHECK=true" >> $GITHUB_ENV
          elif [[ "${{ matrix.check }}" == "security-basic" ]]; then
            echo "RUN_CHECK=true" >> $GITHUB_ENV
          else
            echo "RUN_CHECK=false" >> $GITHUB_ENV
          fi

      - name: Frontend fast lint
        if: env.RUN_CHECK == 'true' && matrix.check == 'frontend-lint'
        run: |
          cd client
          npm ci --prefer-offline --no-audit
          npm run lint -- --max-warnings 0
          npm run type-check

      - name: Backend fast compile
        if: env.RUN_CHECK == 'true' && matrix.check == 'backend-compile'
        run: |
          cd server
          chmod +x gradlew
          ./gradlew compileJava compileTestJava --no-daemon

      - name: Basic security scan
        if: env.RUN_CHECK == 'true' && matrix.check == 'security-basic'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: 1
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

  # Comprehensive CI for main branch and manual triggers
  comprehensive-ci:
    needs: workflow-context
    if: needs.workflow-context.outputs.check_type != 'fast'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [frontend, backend]
        task: [test, build]
      fail-fast: false
    
    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json

      - name: Setup JDK and Gradle cache
        if: matrix.component == 'backend'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        if: matrix.component == 'backend'
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            server/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('server/**/*.gradle*', 'server/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Frontend tasks
        if: matrix.component == 'frontend' && needs.workflow-context.outputs.frontend_changed == 'true'
        run: |
          cd client
          npm ci
          
          if [ "${{ matrix.task }}" = "test" ]; then
            npm run lint
            npm run type-check
            npm test -- --coverage --passWithNoTests --watchAll=false
          elif [ "${{ matrix.task }}" = "build" ]; then
            npm run build
            # Bundle size analysis
            echo "üì¶ Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            du -sh dist/ | tee -a $GITHUB_STEP_SUMMARY || echo "No dist directory" >> $GITHUB_STEP_SUMMARY
            echo "Top 5 largest JS files:" >> $GITHUB_STEP_SUMMARY
            find dist/ -name "*.js" -exec du -h {} + | sort -hr | head -5 | tee -a $GITHUB_STEP_SUMMARY || echo "No JS files found" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi


      - name: Backend tasks
        if: matrix.component == 'backend' && needs.workflow-context.outputs.backend_changed == 'true'
        run: |
          cd server
          chmod +x gradlew
          
          if [ "${{ matrix.task }}" = "test" ]; then
            if ! ./gradlew clean test jacocoTestReport 2>/dev/null; then
              echo "‚ö†Ô∏è JaCoCo coverage failed, running tests without coverage..."
              ./gradlew clean test
            fi
          elif [ "${{ matrix.task }}" = "build" ]; then
            ./gradlew build -Dquarkus.package.type=uber-jar
          fi

      - name: Upload test artifacts
        if: matrix.task == 'test' && always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.component }}
          path: |
            client/coverage/
            server/build/reports/
            mcp/build/reports/
          retention-days: 3

  # Security and quality checks
  security-comprehensive:
    needs: workflow-context
    if: needs.workflow-context.outputs.check_type == 'comprehensive'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Full security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'



  # Status reporting
  ci-summary:
    needs: [workflow-context, fast-validation, comprehensive-ci, security-comprehensive]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## üöÄ CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Check Type:** ${{ needs.workflow-context.outputs.check_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.workflow-context.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend Changed:** ${{ needs.workflow-context.outputs.frontend_changed }}" >> $GITHUB_STEP_SUMMARY
          echo "**Backend Changed:** ${{ needs.workflow-context.outputs.backend_changed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.workflow-context.outputs.check_type }}" = "fast" ]; then
            echo "| Fast Validation | ${{ needs.fast-validation.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Comprehensive CI | ${{ needs.comprehensive-ci.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Security Scan | ${{ needs.security-comprehensive.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check critical failures
        run: |
          if [ "${{ needs.workflow-context.outputs.check_type }}" = "fast" ]; then
            if [ "${{ needs.fast-validation.result }}" != "success" ]; then
              echo "‚ùå Fast validation failed"
              exit 1
            fi
          else
            if [ "${{ needs.comprehensive-ci.result }}" != "success" ]; then
              echo "‚ùå Comprehensive CI failed"
              exit 1
            fi
          fi
          echo "‚úÖ All checks passed"
