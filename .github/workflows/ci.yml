name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, "feature/*", "hotfix/*"]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: false
        default: 'test'
        type: choice
        options:
        - test
        - staging
        - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

# Smart concurrency - cancel for PRs, don't cancel for main
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

permissions:
  contents: write  # Required for version bumping and pushing tags
  security-events: write
  actions: read
  pull-requests: write  # Required for creating release PRs

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '21'

jobs:
  # Determine what type of checks to run
  workflow-context:
    runs-on: ubuntu-latest
    outputs:
      check_type: ${{ steps.context.outputs.check_type }}
      environment: ${{ steps.context.outputs.environment }}
      frontend_changed: ${{ steps.changes.outputs.frontend }}
      backend_changed: ${{ steps.changes.outputs.backend }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'client/**'
              - 'mcp-server/**'
              - '*.json'
              - 'package*.json'
            backend:
              - 'server/**'
              - '*.gradle*'
              - 'gradle/**'

      - name: Determine workflow context
        id: context
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "check_type=fast" >> $GITHUB_OUTPUT
            echo "environment=test" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "check_type=comprehensive" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "check_type=comprehensive" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "check_type=standard" >> $GITHUB_OUTPUT
            echo "environment=test" >> $GITHUB_OUTPUT
          fi

  # Fast checks for PRs
  fast-validation:
    needs: workflow-context
    if: needs.workflow-context.outputs.check_type == 'fast'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        check: [frontend-lint, backend-compile, security-basic]
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environments
        run: |
          if [[ "${{ matrix.check }}" == "frontend-lint" && "${{ needs.workflow-context.outputs.frontend_changed }}" == "true" ]]; then
            echo "RUN_CHECK=true" >> $GITHUB_ENV
          elif [[ "${{ matrix.check }}" == "backend-compile" && "${{ needs.workflow-context.outputs.backend_changed }}" == "true" ]]; then
            echo "RUN_CHECK=true" >> $GITHUB_ENV
          elif [[ "${{ matrix.check }}" == "security-basic" ]]; then
            echo "RUN_CHECK=true" >> $GITHUB_ENV
          else
            echo "RUN_CHECK=false" >> $GITHUB_ENV
          fi

      - name: Frontend fast lint
        if: env.RUN_CHECK == 'true' && matrix.check == 'frontend-lint'
        run: |
          cd client
          npm ci --prefer-offline --no-audit
          npm run lint -- --max-warnings 0
          npm run type-check

      - name: Backend fast compile
        if: env.RUN_CHECK == 'true' && matrix.check == 'backend-compile'
        run: |
          cd server
          chmod +x gradlew
          ./gradlew compileJava compileTestJava --no-daemon

      - name: Basic security scan
        if: env.RUN_CHECK == 'true' && matrix.check == 'security-basic'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'table'
          exit-code: 1
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

  # Comprehensive CI for main branch and manual triggers
  comprehensive-ci:
    needs: workflow-context
    if: needs.workflow-context.outputs.check_type != 'fast'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [frontend, backend]
        task: [test, build]
      fail-fast: false
    
    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            client/package-lock.json
            mcp-server/package-lock.json

      - name: Setup JDK and Gradle cache
        if: matrix.component == 'backend'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        if: matrix.component == 'backend'
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            server/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('server/**/*.gradle*', 'server/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Frontend tasks
        if: matrix.component == 'frontend' && needs.workflow-context.outputs.frontend_changed == 'true'
        run: |
          cd client
          npm ci
          
          if [ "${{ matrix.task }}" = "test" ]; then
            npm run lint
            npm run type-check
            npm test -- --coverage --passWithNoTests --watchAll=false
          elif [ "${{ matrix.task }}" = "build" ]; then
            npm run build
          fi

      - name: Backend tasks
        if: matrix.component == 'backend' && needs.workflow-context.outputs.backend_changed == 'true'
        run: |
          cd server
          chmod +x gradlew
          
          if [ "${{ matrix.task }}" = "test" ]; then
            if ! ./gradlew clean test jacocoTestReport 2>/dev/null; then
              echo "⚠️ JaCoCo coverage failed, running tests without coverage..."
              ./gradlew clean test
            fi
          elif [ "${{ matrix.task }}" = "build" ]; then
            ./gradlew build -Dquarkus.package.type=uber-jar
          fi

      - name: Upload test artifacts
        if: matrix.task == 'test' && always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.component }}
          path: |
            client/coverage/
            server/build/reports/
          retention-days: 3

  # Security and quality checks
  security-comprehensive:
    needs: workflow-context
    if: needs.workflow-context.outputs.check_type == 'comprehensive'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Full security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'


  # Create release branch on merge to main
  # Uses conventional commits to determine version bump:
  # - feat!: or fix!: (breaking changes) → major version (x.0.0)
  # - feat: (new features) → minor version (x.y.0)  
  # - fix: (bug fixes) → patch version (x.y.z)
  # - docs:, style:, refactor:, test:, chore: → no version bump
  create-release-branch:
    needs: [workflow-context, comprehensive-ci]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.comprehensive-ci.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      version_tag: ${{ steps.version.outputs.version_tag }}
      version_type: ${{ steps.version.outputs.version_type }}
      release_branch: ${{ steps.version.outputs.release_branch }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Debug git tags
        run: |
          echo "Available tags:"
          git tag --sort=-v:refname | head -10
          echo "Latest tag:"
          git describe --tags --abbrev=0 || echo "No tags found"

      - name: Determine next version using semver
        id: semver
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ github.token }}
          branch: main
          fallbackTag: 1.0.3
          noVersionBumpBehavior: current

      - name: Generate new version and create release branch
        id: version
        run: |
          # Get version info from semver action
          CURRENT_VERSION="${{ steps.semver.outputs.current }}"
          NEW_VERSION="${{ steps.semver.outputs.next }}"
          VERSION_TAG="v$NEW_VERSION"
          VERSION_TYPE="${{ steps.semver.outputs.bump }}"
          RELEASE_BRANCH="release/$NEW_VERSION"
          
          echo "Current version: $CURRENT_VERSION"
          echo "New version: $NEW_VERSION"
          echo "Version type: $VERSION_TYPE"
          echo "Version tag: $VERSION_TAG"
          echo "Release branch: $RELEASE_BRANCH"
          
          # Only create release if there's a version bump
          if [ "$VERSION_TYPE" != "none" ]; then
            echo "📦 Creating release branch for $VERSION_TYPE version bump"
            
            # Create release branch from main  
            git checkout -b "$RELEASE_BRANCH"
            
            # Create empty commit to mark the release branch
            git commit --allow-empty -m "chore: prepare release $NEW_VERSION"
            
            # Push release branch
            git push origin "$RELEASE_BRANCH"
            
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT
            echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
            echo "release_branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT
          else
            echo "⏭️ No version bump needed - no conventional commits found"
            echo "new_version=" >> $GITHUB_OUTPUT
            echo "version_tag=" >> $GITHUB_OUTPUT
            echo "version_type=none" >> $GITHUB_OUTPUT
            echo "release_branch=" >> $GITHUB_OUTPUT
          fi

      - name: Create Release Pull Request
        if: steps.version.outputs.version_type != 'none'
        run: |
          gh pr create \
            --title "Release ${{ steps.version.outputs.new_version }}" \
            --body "$(cat <<'EOF'
          ## 🚀 Release ${{ steps.version.outputs.new_version }}
          
          **${{ steps.version.outputs.version_type }} release** - Automated release based on conventional commits
          
          ### 📋 Release Details
          
          - **Version Type**: ${{ steps.version.outputs.version_type }} (determined by conventional commits)
          - **New Version**: ${{ steps.version.outputs.new_version }}
          - **Release Branch**: ${{ steps.version.outputs.release_branch }}
          
          ### 🔄 Changes Included
          
          This release includes all conventional commits since the last release:
          - `feat:` commits trigger **minor** version bumps
          - `feat!:` or `fix!:` (breaking changes) trigger **major** version bumps  
          - `fix:` commits trigger **patch** version bumps
          
          ### ✅ Merge Instructions
          
          1. Review the release branch changes
          2. Merge this PR to trigger Docker publishing and GitHub release creation  
          3. After merge, git tag will be created and release published to DockerHub
          
          🤖 Generated with [Claude Code](https://claude.ai/code)
          EOF
          )" \
            --head "${{ steps.version.outputs.release_branch }}" \
            --base main
        env:
          GH_TOKEN: ${{ github.token }}

  docker-publish:
    needs: [workflow-context, comprehensive-ci]
    if: |
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' && 
      needs.comprehensive-ci.result == 'success' && 
      contains(github.event.head_commit.message, 'chore: prepare release')
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [frontend, backend, mcp-server]
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from semver-action
        id: semver
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ github.token }}
          branch: main

      - name: Set version
        id: version
        run: |
          VERSION="${{ steps.semver.outputs.current }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: roudranil/synaptik
          tags: |
            type=raw,value=${{ matrix.component }}-latest
            type=raw,value=${{ matrix.component }}-${{ steps.version.outputs.version }}
            type=raw,value=${{ matrix.component }}-{{date 'YYYY.MM.DD'}}-{{sha}}

      - name: Build and push component image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dist/docker/Dockerfile.${{ matrix.component }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create version tag
        if: matrix.component == 'frontend'  # Only create tag once
        run: |
          VERSION=${{ steps.version.outputs.version }}
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag "v$VERSION"
          git push origin "v$VERSION"

  create-github-release:
    needs: [docker-publish]
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' && 
      contains(github.event.head_commit.message, 'chore: prepare release')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from semver-action
        id: semver
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ github.token }}
          branch: main

      - name: Set version
        id: version
        run: |
          VERSION="${{ steps.semver.outputs.current }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          generate_release_notes: true
          body: |
            ## 🚀 Synaptik ${{ steps.version.outputs.version }}
            
            **Release** - Automated release from release branch merge
            
            ### 📋 Release Details
            
            - **Version Type**: Determined by conventional commits (feat!, feat:, fix:, etc.)
            - **Release Notes**: Check commit history for detailed changes
            - **Commit SHA**: ${{ github.sha }}
            
            ### 🐳 Docker Images
            
            This release includes the following Docker images:
            
            - `roudranil/synaptik:frontend-${{ steps.version.outputs.version }}`
            - `roudranil/synaptik:backend-${{ steps.version.outputs.version }}`  
            - `roudranil/synaptik:mcp-server-${{ steps.version.outputs.version }}`
            
            ### 📦 Installation
            
            ```bash
            curl -sSL https://raw.githubusercontent.com/Dukeroyahl/synaptik/main/install.sh | bash
            ```
            
            ### 🔗 Links
            
            - [🐳 Docker Hub](https://hub.docker.com/r/roudranil/synaptik)
            - [📚 Documentation](https://github.com/Dukeroyahl/Synaptik/wiki)
            - [🚀 Quick Start](https://github.com/Dukeroyahl/Synaptik#-quick-start)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Status reporting
  ci-summary:
    needs: [workflow-context, fast-validation, comprehensive-ci, security-comprehensive, create-release-branch, docker-publish, create-github-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate summary
        run: |
          echo "## 🚀 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Check Type:** ${{ needs.workflow-context.outputs.check_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.workflow-context.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Frontend Changed:** ${{ needs.workflow-context.outputs.frontend_changed }}" >> $GITHUB_STEP_SUMMARY
          echo "**Backend Changed:** ${{ needs.workflow-context.outputs.backend_changed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.workflow-context.outputs.check_type }}" = "fast" ]; then
            echo "| Fast Validation | ${{ needs.fast-validation.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Comprehensive CI | ${{ needs.comprehensive-ci.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Security Scan | ${{ needs.security-comprehensive.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
            if [ "${{ github.ref }}" = "refs/heads/main" ] && [ "${{ github.event_name }}" = "push" ]; then
              echo "| Release Branch Creation | ${{ needs.create-release-branch.result == 'success' && '✅ Success' || (needs.create-release-branch.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }} |" >> $GITHUB_STEP_SUMMARY
              echo "| Docker Publish | ${{ needs.docker-publish.result == 'success' && '✅ Success' || (needs.docker-publish.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }} |" >> $GITHUB_STEP_SUMMARY
              echo "| GitHub Release | ${{ needs.create-github-release.result == 'success' && '✅ Success' || (needs.create-github-release.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }} |" >> $GITHUB_STEP_SUMMARY
              if [ "${{ needs.create-release-branch.outputs.new_version }}" != "" ]; then
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "### 🎉 Release Branch Created" >> $GITHUB_STEP_SUMMARY
                echo "**Version:** ${{ needs.create-release-branch.outputs.new_version }} (${{ needs.create-release-branch.outputs.version_type }})" >> $GITHUB_STEP_SUMMARY
                echo "**Branch:** ${{ needs.create-release-branch.outputs.release_branch }}" >> $GITHUB_STEP_SUMMARY
                echo "**Type:** Automated release branch creation" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "**Next Steps:** Review and merge the release PR to publish Docker images and create GitHub release" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          fi

      - name: Check critical failures
        run: |
          if [ "${{ needs.workflow-context.outputs.check_type }}" = "fast" ]; then
            if [ "${{ needs.fast-validation.result }}" != "success" ]; then
              echo "❌ Fast validation failed"
              exit 1
            fi
          else
            if [ "${{ needs.comprehensive-ci.result }}" != "success" ]; then
              echo "❌ Comprehensive CI failed"
              exit 1
            fi
            # Only fail on critical jobs (release branch creation must always succeed for main push)
            if [ "${{ github.ref }}" = "refs/heads/main" ] && [ "${{ github.event_name }}" = "push" ]; then
              if [ "${{ needs.create-release-branch.result }}" != "success" ]; then
                echo "❌ Release branch creation failed"
                exit 1
              fi
              # Docker publish and GitHub release are only expected if release commit
              if [ "${{ contains(github.event.head_commit.message, 'chore: prepare release') }}" = "true" ]; then
                if [ "${{ needs.docker-publish.result }}" != "success" ]; then
                  echo "❌ Docker publish failed"
                  exit 1
                fi
                if [ "${{ needs.create-github-release.result }}" != "success" ]; then
                  echo "❌ GitHub release creation failed"
                  exit 1
                fi
              fi
            fi
          fi
          echo "✅ All checks passed"
