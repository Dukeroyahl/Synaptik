name: Build and Push Docker Images

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker tag to use (optional)'
        required: false
        default: 'latest'

env:
  REGISTRY: docker.io
  # Change this to your Docker Hub username
  DOCKERHUB_USERNAME: ${{ github.repository_owner }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [server, client, mcp-server]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/synaptik-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.component }}
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  update-compose:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Update docker-compose.hub.yml
      run: |
        # Update the Docker Hub username in the compose file
        sed -i "s/yourusername/${{ env.DOCKERHUB_USERNAME }}/g" config/docker-compose.hub.yml
        
        # If this is a tagged release, update to use specific version
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          sed -i "s/:latest/:$VERSION/g" config/docker-compose.hub.yml
        fi

    - name: Commit updated compose file
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        if git diff --quiet; then
          echo "No changes to commit"
        else
          git add config/docker-compose.hub.yml
          git commit -m "chore: update docker-compose.hub.yml with published images [skip ci]" || exit 0
          git push || exit 0
        fi

  create-release:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Docker Images Published

          The following Docker images have been published to Docker Hub:

          - `${{ env.DOCKERHUB_USERNAME }}/synaptik-server:${{ github.ref_name }}`
          - `${{ env.DOCKERHUB_USERNAME }}/synaptik-client:${{ github.ref_name }}`
          - `${{ env.DOCKERHUB_USERNAME }}/synaptik-mcp-server:${{ github.ref_name }}`

          ## Quick Deploy

          ```bash
          # Update docker-compose.hub.yml with your username
          sed -i 's/yourusername/${{ env.DOCKERHUB_USERNAME }}/g' config/docker-compose.hub.yml
          
          # Create data directory
          mkdir -p config/data/mongodb
          
          # Deploy
          docker-compose -f config/docker-compose.hub.yml up -d
          ```

          ## Access Points

          - **Frontend**: http://localhost:3000
          - **Backend API**: http://localhost:8080
          - **API Docs**: http://localhost:8080/q/swagger-ui
          - **MCP Server**: http://localhost:3001
          - **MongoDB Admin**: http://localhost:8081

        draft: false
        prerelease: false