name: Release & Deployment

on:
  push:
    tags:
      - '*'
  delete:
    # Trigger when tags are deleted
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.2.3)'
        required: true
        type: string
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean

concurrency:
  group: release-${{ github.ref || github.event.inputs.version }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write
  actions: read
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true'

jobs:
  # ============================================================================
  # TAG VALIDATION & RELEASE CREATION
  # ============================================================================
  
  validate-tag:
    runs-on: ubuntu-latest
    if: github.event_name != 'delete'
    outputs:
      is_semver: ${{ steps.check.outputs.is_semver }}
      version: ${{ steps.check.outputs.version }}
      should_create_release: ${{ steps.check.outputs.should_create_release }}
      tag_name: ${{ steps.check.outputs.tag_name }}
    steps:
      - name: Check if tag/version is semantic version
        id: check
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG_NAME="v${{ github.event.inputs.version }}"
            VERSION="${{ github.event.inputs.version }}"
            SHOULD_CREATE="${{ github.event.inputs.create_release }}"
          else
            TAG_NAME="${{ github.ref_name }}"
            VERSION=${TAG_NAME#v}  # Remove 'v' prefix if present
            SHOULD_CREATE="true"
          fi
          
          echo "Checking tag: $TAG_NAME (version: $VERSION)"
          
          # Check if it matches semantic versioning pattern
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "✅ Tag $TAG_NAME matches semantic versioning"
            echo "is_semver=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "should_create_release=$SHOULD_CREATE" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ Tag $TAG_NAME does not match semantic versioning (x.y.z) - ignoring"
            echo "is_semver=false" >> $GITHUB_OUTPUT
            echo "should_create_release=false" >> $GITHUB_OUTPUT
          fi

  generate-release-notes:
    needs: validate-tag
    runs-on: ubuntu-latest
    if: needs.validate-tag.outputs.should_create_release == 'true'
    outputs:
      release_notes: ${{ steps.notes.outputs.release_notes }}
      previous_tag: ${{ steps.previous.outputs.previous_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get previous release tag
        id: previous
        run: |
          # Get all tags sorted by version
          PREVIOUS_TAG=$(git tag -l --sort=-version:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | sed -n '2p')
          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag, use first commit
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
            echo "No previous semantic version tag found, using first commit"
          fi
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          echo "Previous tag/commit: $PREVIOUS_TAG"

      - name: Generate release notes
        id: notes
        run: |
          CURRENT_TAG="${{ needs.validate-tag.outputs.tag_name }}"
          PREVIOUS_TAG="${{ steps.previous.outputs.previous_tag }}"
          VERSION="${{ needs.validate-tag.outputs.version }}"
          
          echo "Generating release notes from $PREVIOUS_TAG to $CURRENT_TAG"
          
          # Create release notes
          cat > release_notes.md << 'EOF'
          ## 🚀 What's New in v$VERSION
          
          ### 📋 Changes Since Previous Release
          EOF
          
          # Get commit messages between releases
          if [ "$PREVIOUS_TAG" != "$CURRENT_TAG" ]; then
            git log --pretty=format:"- %s" $PREVIOUS_TAG..$CURRENT_TAG >> release_notes.md
          else
            echo "- Initial release" >> release_notes.md
          fi
          
          cat >> release_notes.md << 'EOF'
          
          ### 📦 Installation Options
          
          **Option 1: Quick Install (Recommended)**
          ```bash
          curl -sSL https://raw.githubusercontent.com/dukeroyahl/synaptik/main/install.sh | bash
          ```
          
          **Option 2: Docker Images**
          ```bash
          # Frontend
          docker pull ghcr.io/dukeroyahl/synaptik/frontend:v$VERSION
          
          # Backend  
          docker pull ghcr.io/dukeroyahl/synaptik/backend:v$VERSION
          
          # Or use latest
          docker pull ghcr.io/dukeroyahl/synaptik/frontend:latest
          docker pull ghcr.io/dukeroyahl/synaptik/backend:latest
          ```
          
          ### 🤖 Claude Desktop Integration
          For Claude Desktop integration, build the MCP server from source:
          
          ```bash
          # Build MCP server from source (native binaries coming in v0.0.3)
          cd mcp && ./gradlew quarkusBuild
          ```
          
          Then add to your Claude Desktop config:
          ```json
          {
            "mcpServers": {
              "synaptik": {
                "command": "java",
                "args": ["-jar", "/path/to/synaptik/mcp/build/quarkus-app/quarkus-run.jar"]
              }
            }
          }
          ```
          
          Restart Claude Desktop and start managing tasks with AI!
          
          ### 🔗 Links
          - 📚 [Documentation](https://github.com/dukeroyahl/synaptik/wiki)
          - 🐳 [Docker Images](https://github.com/dukeroyahl/synaptik/pkgs/container/synaptik%2Ffrontend)
          - 🤝 [Contributing](https://github.com/dukeroyahl/synaptik/blob/main/CONTRIBUTING.md)
          - 🐛 [Report Issues](https://github.com/dukeroyahl/synaptik/issues)
          
          ---
          
          **Full Changelog**: https://github.com/dukeroyahl/synaptik/compare/$PREVIOUS_TAG...$CURRENT_TAG
          EOF
          
          # Output the release notes (escape for GitHub Actions)
          {
            echo 'release_notes<<EOF'
            cat release_notes.md
            echo EOF
          } >> $GITHUB_OUTPUT

  create-release:
    needs: [validate-tag, generate-release-notes]
    runs-on: ubuntu-latest
    if: needs.validate-tag.outputs.should_create_release == 'true'
    outputs:
      release_id: ${{ steps.create.outputs.release_id }}
    steps:
      - name: Create GitHub Release
        id: create
        run: |
          TAG_NAME="${{ needs.validate-tag.outputs.tag_name }}"
          VERSION="${{ needs.validate-tag.outputs.version }}"
          
          RELEASE_RESPONSE=$(gh api repos/dukeroyahl/synaptik/releases \
            --method POST \
            --field tag_name="$TAG_NAME" \
            --field target_commitish="main" \
            --field name="🚀 Synaptik v$VERSION" \
            --field body="${{ needs.generate-release-notes.outputs.release_notes }}" \
            --field draft=false \
            --field prerelease=false)
          
          RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
          echo "✅ Created release v$VERSION with ID: $RELEASE_ID"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # BUILD & DEPLOYMENT
  # ============================================================================

  build-docker-images:
    needs: [validate-tag, create-release]
    runs-on: ubuntu-latest
    if: needs.validate-tag.outputs.should_create_release == 'true'
    strategy:
      matrix:
        component: [frontend, backend]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}
          tags: |
            type=semver,pattern={{version}},value=v${{ needs.validate-tag.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.${{ matrix.component }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-native-binaries:
    needs: [validate-tag, create-release]
    runs-on: ${{ matrix.runner }}
    if: needs.validate-tag.outputs.should_create_release == 'true'
    strategy:
      matrix:
        include:
          - platform: linux-amd64
            runner: ubuntu-latest
            use-native: false
            builder-image: quay.io/quarkus/ubi-quarkus-mandrel-builder-image:23.1.8.0-Final-java21-amd64
          - platform: darwin-arm64
            runner: macos-14
            use-native: true
            builder-image: ""
          - platform: linux-arm64
            runner: ubuntu-24.04-arm64
            use-native: false
            builder-image: quay.io/quarkus/ubi-quarkus-mandrel-builder-image:23.1.8.0-Final-java21-arm64
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker (Linux only)
        if: matrix.use-native == false
        uses: docker/setup-buildx-action@v3

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
          gradle-home-cache-cleanup: true

      - name: Install GraalVM (macOS only)
        if: matrix.use-native == true
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build MCP native binary
        run: |
          cd mcp
          
          if [ "${{ matrix.use-native }}" = "true" ]; then
            # macOS: Use native GraalVM installation
            ./gradlew build -Dquarkus.package.type=native -Dquarkus.native.container-build=false
          else
            # Linux: Use containerized Mandrel builder
            ./gradlew build -Dquarkus.package.type=native -Dquarkus.native.container-build=true -Dquarkus.native.builder-image=${{ matrix.builder-image }}
          fi

      - name: Prepare binary for release
        run: |
          cd mcp/build
          
          # Find the generated native binary
          BINARY_NAME=$(find . -name "*-runner" -type f | head -n 1)
          if [ -z "$BINARY_NAME" ]; then
            echo "❌ No native binary found!"
            find . -type f -name "*" | head -20
            exit 1
          fi
          
          # Rename to standard format
          mv "$BINARY_NAME" "synaptik-mcp-${{ matrix.platform }}"
          chmod +x "synaptik-mcp-${{ matrix.platform }}"
          
          # Verify binary
          file "synaptik-mcp-${{ matrix.platform }}"
          ls -la "synaptik-mcp-${{ matrix.platform }}"

      - name: Upload binary to release
        run: |
          TAG_NAME="${{ needs.validate-tag.outputs.tag_name }}"
          BINARY_PATH="mcp/build/synaptik-mcp-${{ matrix.platform }}"
          
          echo "📦 Uploading ${{ matrix.platform }} binary to release $TAG_NAME"
          
          # Upload to release (with --clobber to replace if exists)
          gh release upload "$TAG_NAME" "$BINARY_PATH" --clobber --repo dukeroyahl/synaptik
          
          echo "✅ Successfully uploaded synaptik-mcp-${{ matrix.platform }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-package-metadata:
    needs: [build-docker-images]
    runs-on: ubuntu-latest
    if: needs.validate-tag.outputs.should_create_release == 'true'
    steps:
      - name: Update package descriptions
        run: |
          echo "📦 Updating Docker package metadata..."
          
          # Frontend package description
          gh api --method PATCH /orgs/dukeroyahl/packages/container/synaptik%2Ffrontend \
            --field description="🧠 Synaptik Frontend - Smart task management companion with React 18 + TypeScript. Works with Claude Desktop via MCP for AI-powered productivity insights." || true
          
          # Backend package description  
          gh api --method PATCH /orgs/dukeroyahl/packages/container/synaptik%2Fbackend \
            --field description="🧠 Synaptik Backend - Java 21 + Quarkus reactive API server with MongoDB. Provides TaskWarrior-compatible task management and MCP integration for AI assistants." || true
          
          echo "✅ Package metadata updated"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # TAG DELETION CLEANUP
  # ============================================================================
  
  cleanup-deleted-tag:
    runs-on: ubuntu-latest
    if: github.event_name == 'delete' && github.event.ref_type == 'tag'
    steps:
      - name: Check if deleted tag was semantic version
        id: check
        run: |
          DELETED_TAG="${{ github.event.ref }}"
          VERSION=${DELETED_TAG#v}  # Remove 'v' prefix if present
          
          echo "Deleted tag: $DELETED_TAG (version: $VERSION)"
          
          # Check if it matches semantic versioning pattern
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "✅ Deleted tag $DELETED_TAG was a semantic version"
            echo "should_cleanup=true" >> $GITHUB_OUTPUT
            echo "tag_name=$DELETED_TAG" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ Deleted tag $DELETED_TAG was not a semantic version - ignoring"
            echo "should_cleanup=false" >> $GITHUB_OUTPUT
          fi

      - name: Delete corresponding release
        if: steps.check.outputs.should_cleanup == 'true'
        run: |
          DELETED_TAG="${{ steps.check.outputs.tag_name }}"
          
          echo "🔍 Looking for release with tag: $DELETED_TAG"
          
          # Check if release exists
          RELEASE_INFO=$(gh api repos/dukeroyahl/synaptik/releases/tags/$DELETED_TAG 2>/dev/null || echo "null")
          
          if [ "$RELEASE_INFO" = "null" ]; then
            echo "ℹ️ No release found for tag $DELETED_TAG"
            exit 0
          fi
          
          RELEASE_ID=$(echo "$RELEASE_INFO" | jq -r '.id')
          RELEASE_NAME=$(echo "$RELEASE_INFO" | jq -r '.name')
          
          echo "🗑️ Deleting release: $RELEASE_NAME (ID: $RELEASE_ID)"
          
          # Delete the release
          gh api repos/dukeroyahl/synaptik/releases/$RELEASE_ID --method DELETE
          
          echo "✅ Successfully deleted release for tag $DELETED_TAG"
          echo "⚠️ Docker images ghcr.io/dukeroyahl/synaptik/frontend:v${DELETED_TAG#v} and backend:v${DELETED_TAG#v} may still exist"
          echo "   Consider manual cleanup if needed: https://github.com/orgs/dukeroyahl/packages"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}